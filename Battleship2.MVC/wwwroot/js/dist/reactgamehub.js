(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["reactgamehub"],{

/***/ "./Battleship2.MVC/wwwroot/js/dist/reactgamehub.jsx":
/*!**********************************************************!*\
  !*** ./Battleship2.MVC/wwwroot/js/dist/reactgamehub.jsx ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar globalGameId = React.createContext(window.razorGameId);\nvar globalPlayerId = React.createContext(window.razorPlayerId);\nvar globalisGameCreated = React.createContext(window.razorGameIsCreated); //class MapCell extends React.Component {\n//    render() {\n//        let cellclass = props.cellbag.ship ? \"ship\" : (props.cellbag.hidden ? \"hidden\" : \"noship\");\n//        let damaged = props.cellbag.damaged ? <div class=\"hittedfield\"></div> : \"\";\n//        return (\n//            <td className={cellclass}>\n//                {damaged}\n//            </td>\n//        )\n//    }\n//}\n//class Map extends React.Component {\n//    render() {\n//        var rowlist = []\n//        for (let y = 10; y > 0; y++) {\n//            rowlist.push(this.renderRow(y));\n//        }\n//        return (<table cellpadding=\"1\">\n//            {rowlist}\n//        </table>)\n//    }\n//    renderRow(y) {\n//        var cellList = [];\n//        for (let x = 1; x < 11; x++) {\n//            cellList.push(<MapCell cellbag={this.props.cells[10 - y, x]} />)\n//        }\n//        return (\n//            <tr>\n//                {cellList}\n//            </tr>\n//        )\n//    }\n//}\n//class OpponentsMap extends React.Component {\n//    constructor() {\n//        this.state = {\n//            shootingLocked: true,\n//        }\n//    }\n//    render() {\n//        return (\n//            <>\n//                <h3>Your Opponent's Map</h3>\n//                {/*<Map cells={this.props.cells} />*/}\n//            </>\n//        )\n//    }\n//}\n//class YourMap extends React.Component {\n//    constructor() {\n//        this.state = {\n//            shipAdditionLocked: true,\n//            shipsHead: null,\n//        }\n//    }\n//    render() {\n//        return (\n//            <>\n//                <h3>Your Map</h3>\n//                {/*<Map cells={this.props.cells} />*/}\n//            </>\n//        )\n//    }\n//}\n//class GameActionList extends React.Component {\n//    render() {\n//        var gameActionsListItems = this.props.gameActions.map((actionString) => <li className=\"list-group-item\">{actionString}</li>);\n//        return (\n//            <ul className=\"list-group\" id=\"shotlist\">\n//                <li className=\"list-group-item list-group-item-primary\">Game actions are displayed here</li>\n//                {gameActionsListItems}\n//            </ul>\n//        )\n//    }\n//}\n//class Board extends React.Component {\n//    constructor() {\n//        super();\n//        this.state =\n//        {\n//            opponentCells: new Array(10).fill(new Array(10).fill({ damaged: false, ship: false, hidden: true })),\n//            playerCells: new Array(10).fill(new Array(10).fill({ damaged: false, ship: false, hidden: false })),\n//            gameActions: []\n//        }\n//    }\n//    render()\n//    {\n//        return (\n//            <>\n//                {/*<YourMap cells={this.state.playerCells} />*/}\n//                {/*<OpponentsMap cells={this.state.opponentCells} />*/}\n//                {/*<GameActionList gameActions={this.state.gameActions} />*/}\n//            </>\n//        )\n//    }\n//}\n//class UnaddedShip extends React.Component {\n//    render() {\n//        return (\n//            <td className=\"shipexamplecell\" >\n//                <div className=\"shipexample\">\n//                    renderShipDecks()\n//                </div>\n//            </td >\n//        )\n//    }\n//    renderShipDecks() {\n//        var decks = []\n//        for (let i = 0; i < this.props.decks; i++) {\n//            decks.push(<MapCell cellbag={{ ship=true, damaged=false, hidden=false }} />)\n//        }\n//        return decks;\n//    }\n//}\n//class UnaddedShipList extends React.Component {\n//    render() {\n//        var unaddedShipList = this.props.unaddedShipList.map((item) => {\n//            var shipOfCurrentTypeList = [];\n//            for (let i = 0; i < item[1]; i++ )\n//            {\n//                shipOfCurrentTypeList.push(<UnaddedShip decks={item[0]} />)\n//            }\n//            return shipOfCurrentTypeList;\n//        })\n//        return (\n//            <table>\n//                <tr>{unaddedShipList}</tr>\n//            </table >\n//        )\n//    }\n//}\n//class SetUp extends React.Component {\n//    render() {\n//        return (\n//            <>\n//                <h3>Your Unadded Ships</h3>\n//                {/*<UnaddedShipList unaddedShipList={this.props.unaddedShipList} />*/}\n//                <button type=\"button\" className=\"btn btn-primary btn-lg\" >Ready</button>\n//            </>\n//        )\n//    }\n//}\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    console.log('game ctor called');\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this));\n    _this.state = {\n      gameId: _this.globalGameId,\n      playerId: _this.globalPlayerId,\n      isGameCreated: _this.globalisGameCreated,\n      opponentsName: \"\",\n      unaddedShips: null\n    };\n    console.log('game ctor finished calling');\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      console.log('game render called');\n      return React.createElement(React.Fragment, null, React.createElement(\"h3\", null, \"Your opponent's Name: \", this.state.opponentsName), React.createElement(\"h3\", null, \"Your game's Id: \", this.state.gameId));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nReactDOM.render(React.createElement(Game, null), document.getElementById('content'));\n\n//# sourceURL=webpack:///./Battleship2.MVC/wwwroot/js/dist/reactgamehub.jsx?");

/***/ })

},[["./Battleship2.MVC/wwwroot/js/dist/reactgamehub.jsx","runtime"]]]);